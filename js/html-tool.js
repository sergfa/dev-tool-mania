(function () {
	"use strict";

	const ACTION_FAILED_MSG = "<strong>Error!</strong> Something went wrong. Please fix the html and try again.";
	const FILE_MODE_HTML = 'html';
	const minify = require('html-minifier').minify;
	let fileMode = FILE_MODE_HTML;

	const default_settings = {
		minify: {
			"caseSensitive": false,
			"collapseBooleanAttributes": false,
			"collapseInlineTagWhitespace": false,
			"collapseWhitespace": true,
			"conservativeCollapse": false,
			"decodeEntities": false,
			"html5": true,
			"includeAutoGeneratedTags": true,
			"keepClosingSlash": false,
			"minifyCSS": false,
			"minifyJS": false,
			"preserveLineBreaks": false,
			"preventAttributesEscaping": false,
			"processConditionalComments": false,
			"processScripts": [],
			"removeAttributeQuotes": true,
			"removeComments": true,
			"removeEmptyAttributes": false,
			"removeEmptyElements": false,
			"removeOptionalTags": false,
			"removeRedundantAttributes": false,
			"removeScriptTypeAttributes": false,
			"removeStyleLinkTypeAttributes": false,
			"removeTagWhitespace": false,
			"sortAttributes": false,
			"sortClassName": false,
			"trimCustomFragments": false,
			"useShortDoctype": false,
			"customAttrCollapse": false
		}
	};

	const settings_instructions =`<pre><span>//default minify settings</span> <a href="https://www.npmjs.com/package/html-minifier" target="_blank">Options Quick Reference</a></pre>`;


	function getMinifySettings() {
		const userSettings = DevUtils.getLocalItem("html-user-settings");
		if (userSettings) {
			try {
				const userSettingsObj = JSON.parse(userSettings);
				if (userSettingsObj.minify) {
					return userSettingsObj.minify;
				}
			} catch (err) { }
		}

		return default_settings.minify;

	}

	function getSettingsAsString() {
		const userSettings = DevUtils.getLocalItem("html-user-settings");
		if (userSettings) {
			try {
				const userSettingsObj = JSON.parse(userSettings);
				return JSON.stringify(userSettingsObj, null, 4);

			} catch (err) { }
		}

		return JSON.stringify(default_settings, null, 4);

	}

	function calculateSize() {
		const sizeOutput = editorOut.getValue().length;
		const sizeInput = editorInput.getValue().length;
		$('#output-length').text(sizeOutput + '');
		$('#source-length').text(sizeInput + '');
		const efficiency = DevUtils.calculateEfficienty(sizeOutput, sizeInput);
		$('#efficiency').text(efficiency);
	}

	$('.editors-container').height(700).split({
		orientation: 'vertical',
		limit: 10,
		position: '40%', // if there is no percentage it interpret it as pixels
		onDrag: function () {
			editorInput.resize();
			editorOut.resize();
		}
	});

	//Start private functions
	function showMessage(msg) {
		const $messageBox = $('#err-message');
		$messageBox.html(msg);
	}
	//

	//Start create input editor
	const editorInput = ace.edit("leftPane");
	editorInput.setTheme("ace/theme/twilight");
	editorInput.getSession().setMode("ace/mode/html");
	const oldInput = DevUtils.retrieveItem("html-input");
	const example = oldInput ? oldInput : '<p title="blah" id="moo">foo</p>';
	editorInput.setValue(example, 1);
	editorInput.$blockScrolling = Infinity;
	editorInput.getSession().on('change', function () {
		const text = editorInput.getValue();
		DevUtils.storeItem("html-input", text);
	});

	//End create input editor



	//Start settings editor
	const editorSettings = ace.edit("settings-editor");
	editorSettings.setTheme("ace/theme/twilight");
	editorSettings.getSession().setMode("ace/mode/json");
	const jsSettings = getSettingsAsString();
	editorSettings.setValue(jsSettings, 1);

	//End settings editor

	//start init settings instructions
	$('.settings-instructions').html(settings_instructions);
	//end init settings instructions


	//Start create output editor
	const editorOut = ace.edit("rightPane");
	editorOut.setTheme("ace/theme/twilight");
	editorOut.getSession().setMode("ace/mode/html");
	editorOut.setReadOnly(true);
	editorOut.$blockScrolling = Infinity;
	//End create output editor

	//Start add click listeners to action buttons
	$('#btn-clear').on("click", function () {
		editorInput.setValue("");
		editorOut.setValue("");
		showMessage("<strong>Success!</strong> All cleared.", 'success');
	});


	$('#btn-minify').on("click", function () {
		try {
			const input = editorInput.getValue();
			editorOut.getSession().setMode("ace/mode/html");
			const minifySettings = getMinifySettings();
			const result = minify(input, minifySettings);
			editorOut.setValue(result, 1);
			calculateSize();
			showMessage("<strong>Success!</strong> HTML has been minified successfully.", 'success');
			fileMode = FILE_MODE_HTML;

		}
		catch (err) {
			editorOut.setValue("");
			showMessage(ACTION_FAILED_MSG, 'danger');
		}


	});

	$('#btn-copy').on('click', function () {
		editorOut.selectAll();
		editorOut.focus();
		document.execCommand('copy');
		showMessage("<strong>Success!</strong> HTML has been copied successfully.", 'success');

	});


	$('#btn-save').on("click", function () {
		try {
			const text = editorOut.getValue();
			const blob = new Blob([text], { type: "text/plain;charset=utf-8" });
			saveAs(blob, "output." + fileMode);
			showMessage("<strong>Success!</strong> HTML has been saved successfully.", 'success');
		}
		catch (err) {
			showMessage(ACTION_FAILED_MSG, 'danger');
		}

	});


	$('#btn-settings').on("click", function () {
		$('#tool-settings').modal();
	});


	$('#save-settings').on("click", function () {
		try{
			const text = editorSettings.getValue();
			const jsonObj = JSON.parse(text);
			const validatedText = JSON.stringify(jsonObj);
			DevUtils.storeLocalItem("html-user-settings", validatedText);
		}
		catch(err){

		}

		$('#tool-settings').modal('hide');
	});


	$('#restore-settings').on("click", function () {
		try{
			const defaultSettingsTxt = JSON.stringify(default_settings, null, 4);
			DevUtils.storeLocalItem("html-user-settings", defaultSettingsTxt);
			editorSettings.setValue(defaultSettingsTxt,1);
		}
		catch(err){

		}

	});
	





	//End add click listeners to action buttons

})();